name: Ansible Deployment

on:
  push:
  workflow_dispatch:

env:
  ANSIBLE_HOSTKEY_CHECKING: false
  ANSIBLE_REMOTE_USER: ubuntu

jobs:
  ansible-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Cache Ansible and dependencies
        uses: actions/cache@v4.0.2
        id: cache-step
        with:
          path: |
            ~/.local/pipx/venvs/ansible
            /usr/local/lib/python3.8/dist-packages
            ~/.ansible/
            ~/.cache/
          key: ${{ runner.os }}-ansible-${{ hashFiles('**/requirements.yml', '**/galaxy.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ansible-

      - name: Install Ansible (if not cached)
        if: steps.cache-step.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          pipx install --include-deps ansible

      - name: Install Ansible Galaxy Collection (if not cached)
        shell: pwsh
        run: |
          ansible-galaxy collection install amazon.aws

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Debug - Check AWS credentials
        shell: pwsh
        run: |
          aws sts get-caller-identity

      - name: Debug - List EC2 instances
        shell: pwsh
        run: |
          aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,Tags[?Key==`Name`].Value|[0]]' --output table

      - name: Debug - Check Ansible version and plugins
        shell: pwsh
        run: |
          ansible --version
          ansible-galaxy collection list

      - name: Run Ansible inventory commands
        shell: pwsh
        run: |
          ansible-inventory -i myinventory.aws_EC2.yml --list --yaml
          ansible-inventory -i myinventory.aws_EC2.yml --graph

      - name: Write SSH key to file
        shell: pwsh
        run: |
          Set-Content -Path mykeyfile -Value '${{ secrets.ANSIBLE_SSH_KEY }}'
          chmod 400 mykeyfile

      - name: Run Ansible playbook with verbose output
        shell: pwsh
        run: |
          ansible-playbook -i myinventory.aws_EC2.yml --private-key mykeyfile playbook.yml -vvv